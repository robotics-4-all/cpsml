Robot MyRobot
    type: UGV
    shape: Square(30)  // 30 cm side length
    networking: CSAL
    communication: HomeEMQX
    boards:
        - RaspberryPi4
        - JetsonNano @ Transform(Translation(0, 5), Rotation(0, 0))
    sensors:
        - SonarHCSR04(S1) @ Transform(Translation(10, 2), Rotation(0, 10))
        - SonarHCSR04(S2) @ Transform(Translation(10, 2), Rotation(0, 10))
        - VL53L0X(VL1)
        - MyRGBCamera(Cam1) @ Transform(Translation(0, 0, 30), Rotation(0, 0)) on PT1
        - URG04LX(L1) @ Transform(Translation(10, 2), Rotation(0, 10))
        - URG04LX(L2) @ Transform(Translation(10, 2), Rotation(0, 10))
        - URG04LX(L3) @ Transform(Translation(10, 2), Rotation(0, 10))
    actuators:
        - BaseMotorCtrl(Base)
        - GenericLedArray on Cam1
        - MyPanTilt(PT1) @ Transform(Translation(0, 10), Rotation(0, 0))
        - MyPanTilt(PT2) @ Transform(Translation(0, -10), Rotation(0, 0))
    composites:
        - PanTiltCamera @ Transform(Translation(10, 0), Rotation(0, 0))
    functionality:
        - Motion
        - AMCLLocalization(L1=L1)
        - CRSMSlam(L2=L2)
        - PRMPathPlanning
        - MoveBaseNav
        - TargetSelection
        - LiDARFiltering
    rmm:
        broker: Redis
        control:
            volume: true
            ssh: true
        monitoring:
            health: false
            logs: false
        applications:
            types:
                - ROS
                - R4A
                - NodeRED
end

DFunctionality Motion
    reqActuators:
        - MotorController
    inDataModels:
        - BaseCmdVel
    outDataModels:
        - Odometry
    attributes:
        - kinematicModel: int = 'SkidSteering'
end

DFunctionality AMCLLocalization
    reqSensors:
        - LiDAR(L1)
    optFunctionality:
        - Motion
    inDataModels:
        - LiDARData(L1)
        - Map
    outDataModels:
        - Pose
end

DFunctionality CRSMSlam
    reqSensors:
        - LiDAR
    optSensors:
        - IMU
    optFunctionality:
        - Motion
    inDataModels:
        - LiDARData
        - IMUData
        - Odometry from Motion
end

DFunctionality PRMPathPlanning
    reqFunctionality:
        - CRSMSlam
    inDataModels:
        - Pose
        - Map
    outDataModels:
        - Path
end

DFunctionality TargetSelection
    reqFunctionality:
        - AMCLLocalization
    inDataModels:
        - Map
        - Pose from AMCLLocalization
    outDataModels:
        - Pose
end

DFunctionality LiDARFiltering
    reqSensors:
        - LiDAR(L1)
    inDataModels:
        - LiDARData(L1)
    outDataModels:
        - LiDARData
    attributes:
        - filter: str = 'Median'
end


DFunctionality MoveBaseNav
    reqFunctionality:
        - Motion
        - PRMPathPlanning
    inDataModels:
        - Path from PRMPathPlanning
        - LiDARData from LiDARFiltering
        - Pose from AMCLLocalization
        - Pose from TargetSelection
    outDataModels:
        - BaseCmdVel
end
