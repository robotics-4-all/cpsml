#!/usr/bin/env python

import sys
import time

from commlib.msg import MessageHeader, PubSubMessage
from commlib.node import Node
from commlib.utils import Rate
{% if api.broker.btype == "MQTT" %}
from commlib.transports.mqtt import ConnectionParameters
{% elif api.broker.btype == "Redis" %}
from commlib.transports.redis import ConnectionParameters
{% elif api.broker.btype == "AMQP" %}
from commlib.transports.amqp import ConnectionParameters
{% endif %}

{% for msg in api.msgs %}
{% if msg.__class__.__name__ == "TopicMessage" %}
class {{ msg.name }}(PubSubMessage):
    {% for p in msg.properties %}
    {{ p.name }}: {{ p.type.name }}
    {% endfor %}
{% endif %}

{% if msg.__class__.__name__ == "ReqRespMessage" %}
class {{ msg.name }}(PubSubMessage):
    class Request:
        {% for p in msg.request.properties %}
        {{ p.name }}: {{ p.type.name }}
        {% endfor %}

    class Response:
        {% for p in msg.response.properties %}
        {{ p.name }}: {{ p.type.name }}
        {% endfor %}
{% endif %}

{% endfor %}


class {{ thing.name }}Node(Node):
    def __init__(self, *args, **kwargs):
        self._tick_freq = 10
        conn_params = ConnectionParameters(
            host: "{{ api.broker.host }}",
            port: {{ api.broker.port }},
            username: "{{ api.broker.username }}",
            password: "{{ api.broker.password }}",
        )

        super().__init__(node_name="{{ thing.name.lower() }}", conn_params,
                         *args, **kwargs)

    def start(self):
        self.run()
        rate = Rate(self._tick_freq)
        while True:
            rate.sleep()


if __name__ == '__main__':
    node = {{ thing.name }}Node()

    node.start()
