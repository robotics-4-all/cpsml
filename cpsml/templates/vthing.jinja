#!/usr/bin/env python

import sys
import time

from commlib.msg import MessageHeader, PubSubMessage
from commlib.node import Node
from commlib.utils import Rate
{% if api.broker.btype == "MQTT" %}
from commlib.transports.mqtt import ConnectionParameters
{% elif api.broker.btype == "Redis" %}
from commlib.transports.redis import ConnectionParameters
{% elif api.broker.btype == "AMQP" %}
from commlib.transports.amqp import ConnectionParameters
{% endif %}

{% set dModels = [] %}
{% for msg in api.msgs %}
{% if msg.name not in dModels %}
{% if msg.__class__.__name__ == "PubSubMessage" %}
class {{ msg.name }}(PubSubMessage):
    {% for p in msg.properties %}
    {{ p.name }}: {{ p.type.name }}
    {% endfor %}
{% endif %}

{% if msg.__class__.__name__ == "RPCMessage" %}
class {{ msg.name }}(PubSubMessage):
    class Request:
        {% for p in msg.request.properties %}
        {{ p.name }}: {{ p.type.name }}
        {% endfor %}

    class Response:
        {% for p in msg.response.properties %}
        {{ p.name }}: {{ p.type.name }}
        {% endfor %}
{% endif %}
{% set dModels = dModels.append(msg.name) %}
{% endif %}

{% endfor %}


class {{ thing.name }}Node(Node):
    def __init__(self, *args, **kwargs):
        self._tick_freq = 10
        conn_params = ConnectionParameters(
            "host": "{{ api.broker.host }}",
            "port": {{ api.broker.port }},
            "username": "{{ api.broker.username }}",
            "password": "{{ api.broker.password }}"
        )

		super().__init__(
			node_name="{{ thing.name.lower() }}",
			conneconn_params=conn_params,
			*args, **kwargs
		)
	{% for e in api.endpoints %}
	{% if e.__class__.__name__ == "Subscriber" %}
		self.create_subscriber(
			"{{ e.uri }}",
			{{ e.msg.name }},
			on_message=self._{{e.uri.split('.')[-1]}}
		)
	{% elif e.__class__.__name__ == "Publisher" %}
		pub = self.create_publisher(
			"{{ e.uri }}",
			{{ e.msg.name }}
		)
		self.start_pub_worker(pub)
	{% endif %}
	{% endfor %}

    def start(self):
        self.run()
        rate = Rate(self._tick_freq)
        while True:
            rate.sleep()


if __name__ == '__main__':
    node = {{ thing.name }}Node()

    node.start()
