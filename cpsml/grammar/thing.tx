/*
    Thing DSL
*/

import networking
import communication
import datatype

Model:
    (
    imports*=Import
    thing=Thing
    )#
;


Thing: Robot | Device | Sensor | Actuator;


Robot:
    'Robot' name=ID
        (
            ('type' ':' rtype=RobotType)
            ('urdf' ':' urdfPath=STRING)
            ('boards' ':' '-' boards+=DeviceBoardType['-'])
            ('sensors' ':' '-' sensors*=[Sensor:FQN]['-'])?
            ('actuators' ':' '-' actuators*=[Actuator:FQN]['-'])?
            ('functionality' ':' '-' functionality+=RobotFunctionality['-'])?
            ('networking' ':' networking=[Network:FQN])?
            ('communication' ':' communication=[CommunicationMiddleware:FQN])?
            ('rmm' ':' rmm=RMM)?
            ('hasBle' ':' ble=BOOL)?
        )#
    'end'
;

Device:
    'Device' name=ID
        (
            ('type: ' type=DeviceBoardType)
            ('sensors:' '-' sensors*=[Sensor:FQN]['-'])?
            ('actuators:' '-' actuators*=[Actuator:FQN]['-'])?
            ('networking' ':' networking=[Network:FQN])?
            ('communication' ':' communication=[CommunicationMiddleware:FQN])?
            ('rmm' ':' rmm=RMM)?
            ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

Actuator:
    GenericActuator     |
    MotorController     |
    Speaker             |
    Led
;

GenericSensor:
    'Sensor' name=ID
        (
            ('type:' type=SensorType)
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' acqFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

MotorController:
    'MotorController' name=ID
        (
            ('type:' type=MotorControllerType)
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
        )#
    'end'
;

Speaker:
    'Speaker' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
        )#
    'end'
;

Led: SingleLed | LedArray;

SingleLed:
    'Led' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('color' ':' color=INT)?
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;

LedArray:
    'LedArray' name=ID
        (
            ('size:' size=INT)
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;

GenericActuator:
    'Actuator' name=ID
        (
            ('type:' type=ActuatorType)
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;


Sensor:
    GenericSensor   |
    RangeFinder     |
    LiDARSensor     |
    CameraRGB       |
    CameraThermal   |
    Button
;

Button:
    'Button' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

RangeFinder:
    'RangeFinder' name=ID
        (
            ('type:' type=[RangeFinderType])
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

LiDARSensor:
    'LiDARSensor' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('minAngle:' minAngle=FLOAT)?
            ('maxAngle:' maxAngle=FLOAT)?
            ('numRanges:' numRanges=FLOAT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

CameraRGB:
    'CameraRGB' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('resHeight:' resHeight=FLOAT)?
            ('resWidth:' resWidth=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
        )#
    'end'
;

CameraThermal:
    'CameraThermal' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('resHeight:' resHeight=FLOAT)?
            ('resWidth:' resWidth=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
        )#
    'end'
;

Accelerometer:
    'Accelerometer' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

Magnetometer:
    'Magnetometer' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

Gyroscope:
    'Gyroscope' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=DeviceConnectivity)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        'type:' type=IMUType
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('connectivity:' connectivity=[DeviceConnectivity])?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotFunctionality:
    'Mobility'          |
    'VoiceInterraction' |
    'NLU'               |
    'Navigation'        |
    'Mapping'           |
    'SLAM'              |
    'FaceDetection'     |
    'ObjectDetection'
;

SensorType:
    'Range'         |
    'LiDAR'         |
    'CameraRGB'     |
    'Thermal'       |
    'ThermalArray'  |
    'CameraThermal' |
    'IMU'           |
    'Compass'       |
    'Accelerometer' |
    'Magnetometer'
;

ActuatorType:
    'MotorController'   |
    'LED'               |
    'RGBLed'            |
    'NeopixelLED'       |
    'ServoController'
;

RMM:
    (
        (
        'control' ':'
        (
            ('reboot' ':' rebootCtrl=BOOL)?
            ('shutdown' ':' shutdownCtrl=BOOL)?
            ('volume' ':' volumeCtrl=BOOL)?
            ('ssh' ':' ssh=BOOL)?
        )#
        )?
        (
        'monitoring' ':'
        (
            ('health' ':' healthM=BOOL)?
            ('logs' ':' logsM=BOOL)?
        )#
        )?
        (
        'applications' ':'
            'types' ':' '-' appType*=ApplicationType['-']
        )?
    )#
;

ApplicationType:
    "ROS"       |
    "R4A"       |
    "NodeRED"
;

DeviceConnectivity: WirelessConnection | HardwareConnection;

WirelessConnection: 'Wifi' | 'BLE';
HardwareConnection: 'Hardware';

// HardwareConnection: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH' | 'PWM';

RangeFinderType: 'Sonar' | 'ToF' | 'IR';

DeviceBoardType: 'ESP32' | 'ESP8266' | 'RPi3' | 'RPi4' | 'JetsonNano';

OperatingSystem: 'RaspbianOS' | 'RiotOS' | 'UbuntuOS' | 'OtherOS';

MotorControllerType: 'SingleMotor' | 'DualMotor';

NID: /(.*?)\n/;

FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
