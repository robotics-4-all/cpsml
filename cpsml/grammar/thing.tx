/*
    Thing DSL
*/

import networking
import communication
import datatype
import geometry

Model:
    (
    imports*=Import
    thing=Thing
    )#
;

Thing: SmartThing | SimpleThing;

SmartThing: Robot | SmartDevice;

SmartDevice: Device | CompositeDevice;

CompositeDevice:
    'CDevice' name=ID
        'devices' ':'  '-' devices*=[SmartDevice:FQN]['-']
        ('shape' ':' shape=Shape)?
    'end'
;

SimpleThing: Sensor | Actuator | CompositeSimpleThing;

CompositeSimpleThing:
    'CSThing' name=ID
        includes+=SimpleThing
    'end'
;


Robot:
    'Robot' name=ID
        (
            ('type' ':' rtype=RobotType)
            ('boards' ':' '-' boards+=PosedBoard['-'])
            ('sensors:' '-' sensors*=PosedSensor['-'])?
            ('actuators:' '-' actuators*=PosedActuator['-'])?
            ('shape' ':' shape=Shape)?
            ('functionality' ':' '-' functionality+=RobotFunctionality['-'])?
            ('networking' ':' networking=[Network:FQN])?
            ('communication' ':' communication=[CommunicationMiddleware:FQN])?
            ('rmm' ':' rmm=RMM)?
            ('hasBle' ':' ble=BOOL)?
        )#
    'end'
;

Device:
    'Device' name=ID
        (
            ('board: ' type=Board)
            ('shape' ':' shape=Shape)?
            ('sensors:' '-' sensors*=PosedSensor['-'])?
            ('actuators:' '-' actuators*=PosedActuator['-'])?
            ('networking' ':' networking=[Network:FQN])?
            ('communication' ':' communication=[CommunicationMiddleware:FQN])?
            ('rmm' ':' rmm=RMM)?
            ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

PosedSensor:
    ref=[Sensor:FQN|+m:thing] ('@' transformation=Transformation)?
;

PosedActuator:
    ref=[Actuator:FQN|+m:thing] ('@' transformation=Transformation)?
;

PosedBoard:
    ref=Board ('@' transformation=Transformation)?
;

Actuator:
    GenericActuator     |
    MotorController     |
    Speaker             |
    Led
;

CustomSensorType:
    'SensorType' stype=ID
;

CustomActuatorType:
    'ActuatorType' atype=ID
;

GenericSensor:
    'GenericSensor' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' acqFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

MotorController:
    'MotorController' name=ID
        (
            ('type:' type=MotorControllerType)
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
        )#
    'end'
;

Speaker:
    'Speaker' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
        )#
    'end'
;

Led: SingleLed | LedArray;

SingleLed:
    'Led' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('color' ':' color=INT)?
            ('shape' ':' shape=Shape)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;

LedArray:
    'LedArray' name=ID
        (
            ('size:' size=INT)
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;

GenericActuator:
    'Actuator' '<' atype=[CustomActuatorType] '>' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('responseTime:' responseTime=FLOAT)?
        )#
    'end'
;


Sensor:
    GenericSensor   |
    RangeFinder     |
    LiDARSensor     |
    CameraRGB       |
    CameraThermal   |
    Button
;

Button:
    'Button' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

RangeFinder:
    'RangeFinder' name=ID
        (
            ('type:' type=[RangeFinderType])
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

LiDARSensor:
    'LiDARSensor' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('minAngle:' minAngle=FLOAT)?
            ('maxAngle:' maxAngle=FLOAT)?
            ('numRanges:' numRanges=FLOAT)?
            ('minRange:' minRange=FLOAT)?
            ('maxRange:' maxRange=FLOAT)?
        )#
    'end'
;

CameraRGB:
    'CameraRGB' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('resHeight:' resHeight=FLOAT)?
            ('resWidth:' resWidth=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
        )#
    'end'
;

CameraThermal:
    'CameraThermal' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
            ('resHeight:' resHeight=FLOAT)?
            ('resWidth:' resWidth=FLOAT)?
            ('hfov:' hfov=FLOAT)?
            ('vfov:' vfov=FLOAT)?
        )#
    'end'
;

Accelerometer:
    'Accelerometer' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

Magnetometer:
    'Magnetometer' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

Gyroscope:
    'Gyroscope' name=ID
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        'type:' type=IMUType
        (
            ('dataModel:' dataModel=[DataType:FQN])
            ('shape' ':' shape=Shape)?
            ('freq:' pubFreq=FLOAT)?
            ('maxFreq:' maxFreq=FLOAT)?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotFunctionality:
    'Mobility'                      |
    'Manipulation'                  |
    'NLU'                           |
    'Navigation'                    |
    'Mapping'                       |
    'FaceDetection'                 |
    'ObjectDetection'
;

SensorType:
    'Range'         |
    'LiDAR'         |
    'CameraRGB'     |
    'Thermal'       |
    'ThermalArray'  |
    'CameraThermal' |
    'IMU'           |
    'Compass'       |
    'Accelerometer' |
    'Magnetometer'  |
    'Other'
;

ActuatorType:
    'MotorController'   |
    'LED'               |
    'RGBLed'            |
    'NeopixelLED'       |
    'ServoController'
;

RMM:
    (
        ('communication' ':' localBroker=DeviceLocalBroker)
        (
        'control' ':'
        (
            ('reboot' ':' rebootCtrl=BOOL)?
            ('shutdown' ':' shutdownCtrl=BOOL)?
            ('volume' ':' volumeCtrl=BOOL)?
            ('ssh' ':' ssh=BOOL)?
        )#
        )?
        (
        'monitoring' ':'
        (
            ('health' ':' healthM=BOOL)?
            ('logs' ':' logsM=BOOL)?
        )#
        )?
        (
        'applications' ':'
            'types' ':' '-' appType*=ApplicationType['-']
        )?
    )#
;

ApplicationType:
    "ROS"       |
    "R4A"       |
    "NodeRED"
;

DeviceLocalBroker:
    'MQTT_EMQX'     |
    'MQTT_Mosquito' |
    'AMQP_RabbitMQ' |
    'Redis'
;
/*
SimpleThingConnectivity: WirelessConnection | HardwareConnection;

WirelessConnection: 'Wifi' | 'BLE';
HardwareConnection: 'Hardware';
*/
// HardwareConnection: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH' | 'PWM';

RangeFinderType: 'Sonar' | 'ToF' | 'IR';

// The biggest difference between an SBC and a microcontroller is that the former is a self-contained computer with the ability to run an OS, whereas the latter is just a chip with far fewer resources.

// Also, unlike SBCs, microcontrollers are intended to run only one program repeatedly. For instance, SBCs like Raspberry Pie run Linux, while boards like Arduino Uno donâ€™t.
Board: SBC | Microcontroller;

SBC:
    'GenericSBC'        |
    'RaspberryPi3'      |
    'RaspberryPi4'      |
    'JetsonNano'
;

Microcontroller:
    'GenericESP32'        |
    'GenericESP8266'      |
    'GenericArduino'
;

OperatingSystem: 'RaspbianOS' | 'RiotOS' | 'UbuntuOS' | 'OtherOS';

MotorControllerType: 'SingleMotor' | 'DualMotor';

NID: /(.*?)\n/;

FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
