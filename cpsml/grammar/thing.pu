@startuml
set namespaceSeparator .


class thing.Model  {
}


class thing.Thing <<abstract>> {
}


class thing.SmartThing <<abstract>> {
}


class thing.SmartDevice <<abstract>> {
}


class thing.CompositeDevice  {
  name : ID
}


class thing.SimpleThing <<abstract>> {
}


class thing.CompositeSimpleThing  {
  name : ID
}


class thing.Robot  {
  name : ID
  rtype : RobotType
  ble : BOOL
}


class thing.Device  {
  name : ID
  ble : BOOL
}


class thing.PosedThing <<abstract>> {
}


class thing.PosedSimpleThing <<abstract>> {
}


class thing.PosedCSThing  {
}


class thing.PosedSmartDevice  {
}


class thing.PosedDevice  {
}


class thing.PosedSensor  {
  name : ID
}


class thing.PosedActuator  {
  name : ID
}


class thing.PosedBoard  {
  ref : Board
}


class thing.Actuator <<abstract>> {
}


class thing.CustomSensorType  {
  stype : ID
}


class thing.CustomActuatorType  {
  atype : ID
}


class thing.MotorController  {
  name : ID
  type : MotorControllerType
}


class thing.ServoController  {
  name : ID
}


class thing.PanTilt  {
  name : ID
}


class thing.Speaker  {
  name : ID
}


class thing.Led <<abstract>> {
}


class thing.SingleLed  {
  name : ID
  color : INT
  responseTime : FLOAT
}


class thing.LedArray  {
  name : ID
  size : INT
  responseTime : FLOAT
}


class thing.GenericActuator  {
  name : ID
  responseTime : FLOAT
}


class thing.Sensor <<abstract>> {
}


class thing.GenericSensor  {
  name : ID
  maxFreq : FLOAT
}


class thing.Button  {
  name : ID
  maxFreq : FLOAT
}


class thing.RangeFinder  {
  name : ID
  type : RangeFinderType
  pubFreq : FLOAT
  maxFreq : FLOAT
  hfov : FLOAT
  vfov : FLOAT
  minRange : FLOAT
  maxRange : FLOAT
}


class thing.LiDARSensor  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
  minAngle : FLOAT
  maxAngle : FLOAT
  numRanges : FLOAT
  minRange : FLOAT
  maxRange : FLOAT
}


class thing.CameraRGB  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
  resHeight : FLOAT
  resWidth : FLOAT
  hfov : FLOAT
  vfov : FLOAT
}


class thing.CameraThermal  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
  resHeight : FLOAT
  resWidth : FLOAT
  hfov : FLOAT
  vfov : FLOAT
}


class thing.Accelerometer  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
}


class thing.Magnetometer  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
}


class thing.Gyroscope  {
  name : ID
  pubFreq : FLOAT
  maxFreq : FLOAT
}


class thing.IMU  {
  name : ID
  type : IMUType
  pubFreq : FLOAT
  maxFreq : FLOAT
}


class thing.RobotFunctionality  {
  name : ID
  number : INT
  requiredSensors : optional<list[SensorType]>
  optionalSensors : optional<list[SensorType]>
  requiredActuators : optional<list[ActuatorType]>
  optionalActuators : optional<list[ActuatorType]>
}


class thing.RMM  {
  broker : RMMBrokerType
  rebootCtrl : BOOL
  shutdownCtrl : BOOL
  volumeCtrl : BOOL
  ssh : BOOL
  healthM : BOOL
  logsM : BOOL
  appType : optional<list[ApplicationType]>
}


class thing.Import  {
  importURI : FQNI
  name : ID
}


class thing.DTransformation  {
}


class networking.Networking  {
}


class networking.NetworkTopology  {
  name : ID
}


class networking.N2NConnection  {
}


class networking.Network <<abstract>> {
}


class networking.WiredNetwork  {
  name : ID
  subnet : STRING
  gateway : STRING
  dhcp : BOOL
  dns : optional<list[STRING]>
}


class networking.WirelessNetwork  {
  name : ID
  wifi_ssid : STRING
  psk : STRING
  ip : STRING
  subnet : STRING
  gateway : STRING
  dns : optional<list[NID]>
}


class networking.Import  {
  importURI : FQNI
  name : ID
}


class communication.Model  {
}


class communication.CommunicationMiddleware <<abstract>> {
}


class communication.MessageBroker <<abstract>> {
}


class communication.REST  {
  name : ID
  baseUrl : STRING
  port : INT
}


class communication.Authentication <<abstract>> {
}


class communication.AuthPlain  {
  username : STRING
  password : STRING
}


class communication.AuthApiKey  {
  key : STRING
}


class communication.AMQPBroker  {
  name : ID
  host : STRING
  port : INT
  vhost : STRING
  ssl : BOOL
}


class communication.MQTTBroker  {
  name : ID
  host : STRING
  port : INT
  ssl : BOOL
}


class communication.RedisBroker  {
  name : ID
  host : STRING
  port : INT
  db : INT
  ssl : BOOL
}


class communication.Import  {
  importURI : FQNI
  name : ID
}


class datatype.DataTypeModel  {
}


class datatype.Package  {
  name : ID
  version : STRING
  description : STRING
  author : STRING
  email : STRING
}


class datatype.DataType <<abstract>> {
}


class datatype.CustomDataType  {
  name : ID
  description : Description
}


class datatype.Property <<abstract>> {
}


class datatype.SimpleProperty  {
  name : ID
  default : STRING
}


class datatype.ListProperty  {
  name : ID
  default : STRING
}


class datatype.Enumeration  {
  name : ID
  description : Description
}


class datatype.EnumerationElement  {
  name : STRING
}


class datatype.PrimitiveDataType  {
  name : ID
}


class datatype.Import  {
  importURI : FQNI
  name : ID
}


class geometry.Point  {
  x : FLOAT
  y : FLOAT
  z : FLOAT
}


class geometry.Translation  {
  x : FLOAT
  y : FLOAT
  z : FLOAT
}


class geometry.Rotation  {
  yaw : FLOAT
  pitch : FLOAT
  roll : FLOAT
}


class geometry.Transformation  {
}


class geometry.Pose  {
}


class geometry.Shape <<abstract>> {
}


class geometry.ComplexShape  {
}


class geometry.PredefinedShape <<abstract>> {
}


class geometry.Circle  {
  radius : FLOAT
}


class geometry.Square  {
  length : FLOAT
}


class geometry.Rectangle  {
  width : FLOAT
  length : FLOAT
}


class geometry.Cylinder  {
  radius : FLOAT
  height : FLOAT
}


class geometry.ArbitraryShape  {
}


thing.Model *--> thing.Import: imports 0..*
thing.Model *--> thing.Thing: things 0..*
thing.Thing <|-- thing.SmartThing
thing.Thing <|-- thing.SimpleThing
thing.SmartThing <|-- thing.Robot
thing.SmartThing <|-- thing.SmartDevice
thing.SmartDevice <|-- thing.Device
thing.SmartDevice <|-- thing.CompositeDevice
thing.CompositeDevice o--> thing.PosedSmartDevice: devices 1..*
thing.CompositeDevice *--> geometry.Shape: shape
thing.SimpleThing <|-- thing.Sensor
thing.SimpleThing <|-- thing.Actuator
thing.SimpleThing <|-- thing.CompositeSimpleThing
thing.CompositeSimpleThing *--> geometry.Shape: shape
thing.CompositeSimpleThing *--> thing.PosedSensor: sensors 1..*
thing.CompositeSimpleThing *--> thing.PosedActuator: actuators 1..*
thing.CompositeSimpleThing *--> thing.PosedCSThing: composites 1..*
thing.Robot *--> thing.PosedBoard: boards 1..*
thing.Robot *--> thing.PosedSensor: sensors 0..*
thing.Robot *--> thing.PosedActuator: actuators 0..*
thing.Robot *--> thing.PosedCSThing: composites 0..*
thing.Robot o--> thing.RobotFunctionality: functionality 1..*
thing.Robot o--> networking.Network: networking
thing.Robot o--> communication.CommunicationMiddleware: communication
thing.Robot *--> geometry.Shape: shape
thing.Robot *--> thing.RMM: rmm
thing.Device *--> thing.PosedBoard: board
thing.Device *--> thing.PosedSensor: sensors 0..*
thing.Device *--> thing.PosedActuator: actuators 0..*
thing.Device *--> thing.PosedCSThing: composites 0..*
thing.Device o--> networking.Network: networking
thing.Device o--> communication.CommunicationMiddleware: communication
thing.Device *--> geometry.Shape: shape
thing.Device *--> thing.RMM: rmm
thing.PosedThing <|-- thing.PosedSmartDevice
thing.PosedThing <|-- thing.PosedSimpleThing
thing.PosedThing <|-- thing.PosedBoard
thing.PosedSimpleThing <|-- thing.PosedSensor
thing.PosedSimpleThing <|-- thing.PosedActuator
thing.PosedSimpleThing <|-- thing.PosedCSThing
thing.PosedCSThing o--> thing.CompositeSimpleThing: ref
thing.PosedCSThing *--> thing.DTransformation: transformation
thing.PosedSmartDevice o--> thing.SmartDevice: ref
thing.PosedSmartDevice *--> thing.DTransformation: transformation
thing.PosedDevice o--> thing.Device: ref
thing.PosedDevice *--> thing.DTransformation: transformation
thing.PosedSensor o--> thing.Sensor: ref
thing.PosedSensor *--> thing.DTransformation: transformation
thing.PosedActuator o--> thing.Actuator: ref
thing.PosedActuator *--> thing.DTransformation: transformation
thing.PosedBoard *--> thing.DTransformation: transformation
thing.Actuator <|-- thing.GenericActuator
thing.Actuator <|-- thing.MotorController
thing.Actuator <|-- thing.ServoController
thing.Actuator <|-- thing.PanTilt
thing.Actuator <|-- thing.Speaker
thing.Actuator <|-- thing.Led
thing.MotorController o--> datatype.DataType: dataModel
thing.MotorController *--> geometry.Shape: shape
thing.ServoController o--> datatype.DataType: dataModel
thing.ServoController *--> geometry.Shape: shape
thing.PanTilt o--> datatype.DataType: dataModel
thing.PanTilt *--> geometry.Transformation: joints 0..*
thing.PanTilt *--> geometry.Shape: shape
thing.Speaker o--> datatype.DataType: dataModel
thing.Speaker *--> geometry.Shape: shape
thing.Led <|-- thing.SingleLed
thing.Led <|-- thing.LedArray
thing.SingleLed o--> datatype.DataType: dataModel
thing.SingleLed *--> geometry.Shape: shape
thing.LedArray o--> datatype.DataType: dataModel
thing.LedArray *--> geometry.Shape: shape
thing.GenericActuator o--> thing.CustomActuatorType: atype
thing.GenericActuator o--> datatype.DataType: dataModel
thing.GenericActuator *--> geometry.Shape: shape
thing.Sensor <|-- thing.GenericSensor
thing.Sensor <|-- thing.RangeFinder
thing.Sensor <|-- thing.LiDARSensor
thing.Sensor <|-- thing.CameraRGB
thing.Sensor <|-- thing.CameraThermal
thing.Sensor <|-- thing.Button
thing.GenericSensor o--> thing.CustomSensorType: stype
thing.GenericSensor o--> datatype.DataType: dataModel
thing.GenericSensor *--> geometry.Shape: shape
thing.Button o--> datatype.DataType: dataModel
thing.Button *--> geometry.Shape: shape
thing.RangeFinder o--> datatype.DataType: dataModel
thing.RangeFinder *--> geometry.Shape: shape
thing.LiDARSensor o--> datatype.DataType: dataModel
thing.LiDARSensor *--> geometry.Shape: shape
thing.CameraRGB o--> datatype.DataType: dataModel
thing.CameraRGB *--> geometry.Shape: shape
thing.CameraThermal o--> datatype.DataType: dataModel
thing.CameraThermal *--> geometry.Shape: shape
thing.Accelerometer o--> datatype.DataType: dataModel
thing.Accelerometer *--> geometry.Shape: shape
thing.Magnetometer o--> datatype.DataType: dataModel
thing.Magnetometer *--> geometry.Shape: shape
thing.Gyroscope o--> datatype.DataType: dataModel
thing.Gyroscope *--> geometry.Shape: shape
thing.IMU o--> datatype.DataType: dataModel
thing.IMU *--> geometry.Shape: shape
thing.RobotFunctionality o--> thing.RobotFunctionality: functionalities 0..*
thing.DTransformation *--> geometry.Transformation: transformation
thing.DTransformation o--> thing.PosedThing: parentThing
networking.Networking *--> networking.Network: networks 0..*
networking.Networking *--> networking.NetworkTopology: topology
networking.NetworkTopology o--> networking.Network: networks 0..*
networking.NetworkTopology *--> networking.N2NConnection: connections 0..*
networking.N2NConnection o--> networking.Network: from
networking.N2NConnection o--> networking.Network: to
networking.Network <|-- networking.WiredNetwork
networking.Network <|-- networking.WirelessNetwork
communication.Model *--> communication.Import: imports 0..*
communication.Model *--> communication.CommunicationMiddleware: communication 0..*
communication.CommunicationMiddleware <|-- communication.MessageBroker
communication.CommunicationMiddleware <|-- communication.REST
communication.MessageBroker <|-- communication.AMQPBroker
communication.MessageBroker <|-- communication.MQTTBroker
communication.MessageBroker <|-- communication.RedisBroker
communication.REST *--> communication.Authentication: auth
communication.Authentication <|-- communication.AuthPlain
communication.Authentication <|-- communication.AuthApiKey
communication.AMQPBroker *--> communication.Authentication: auth
communication.MQTTBroker *--> communication.Authentication: auth
communication.RedisBroker *--> communication.Authentication: auth
datatype.DataTypeModel *--> datatype.Import: imports 0..*
datatype.DataTypeModel *--> datatype.Package: package
datatype.DataTypeModel *--> datatype.CustomDataType: types 0..*
datatype.DataTypeModel *--> datatype.Enumeration: enums 0..*
datatype.DataType <|-- datatype.PrimitiveDataType
datatype.DataType <|-- datatype.CustomDataType
datatype.DataType <|-- datatype.Enumeration
datatype.CustomDataType *--> datatype.Property: properties 0..*
datatype.Property <|-- datatype.ListProperty
datatype.Property <|-- datatype.SimpleProperty
datatype.SimpleProperty o--> datatype.DataType: type
datatype.ListProperty o--> datatype.DataType: type
datatype.Enumeration *--> datatype.EnumerationElement: elements 1..*
geometry.Transformation *--> geometry.Translation: translation
geometry.Transformation *--> geometry.Rotation: rotation
geometry.Pose *--> geometry.Translation: translation
geometry.Pose *--> geometry.Rotation: rotation
geometry.Shape <|-- geometry.PredefinedShape
geometry.Shape <|-- geometry.ArbitraryShape
geometry.Shape <|-- geometry.ComplexShape
geometry.ComplexShape *--> geometry.Shape: shapes 0..*
geometry.PredefinedShape <|-- geometry.Circle
geometry.PredefinedShape <|-- geometry.Square
geometry.PredefinedShape <|-- geometry.Rectangle
geometry.PredefinedShape <|-- geometry.Cylinder
geometry.ArbitraryShape *--> geometry.Point: points 0..*

legend
  Match rules:
  |= Name  |= Rule details |
  | MotorControllerType | SingleMotor\|DualMotor |
  | FQN | ID (. ID)* |
  | Comment |  |
  | ApplicationType | ROS\|NodeRED\|R4A\|ELSA\|TekTrain |
  | FQNI | (ID)+ .*\? |
  | SensorType | Range\|LiDAR\|CameraRGB\|Thermal\|ThermalArray\|CameraThermal\|IMU\|Compass\|Accelerometer\|Magnetometer\|Other |
  | OperatingSystem | RaspbianOS\|RiotOS\|UbuntuOS\|OtherOS |
  | Description | \\#(.*\?)$ |
  | Description | \\#(.*\?)$ |
  | FQN | FQN |
  | Microcontroller | GenericESP32\|GenericESP8266\|GenericArduino |
  | CommentBlock | \\/\\*(.\|\\n)*\?\\*\\/ |
  | RobotType | Humanoid\|UGV\|UAV |
  | SBC | GenericSBC\|RaspberryPi3\|RaspberryPi4\|JetsonNano |
  | FQNI | (ID)+ .*\? |
  | CommentLine | \\/\\/.*\?$ |
  | FQNI | (ID)+ .*\? |
  | IMUType | 6DOF\|9DOF |
  | Board |  |
  | FQN | ID (. ID)* |
  | CommentBlock | \\/\\*(.\|\\n)*\?\\*\\/ |
  | Comment |  |
  | FQN | ID (. ID)* |
  | ActuatorType | MotorController\|LED\|RGBLed\|NeopixelLED\|ServoController |
  | CommentBlock | \\/\\*(.\|\\n)*\?\\*\\/ |
  | RangeFinderType | Sonar\|ToF\|IR |
  | NID | (.*\?)\\n |
  | CommentLine | \\/\\/.*\?$ |
  | Description | \\#(.*\?)$ |
  | NID | (.*\?)\\n |
  | FQNI | (ID)+ .*\? |
  | CommentLine | \\/\\/.*\?$ |
  | RMMBrokerType | MQTT_EMQX\|MQTT_Mosquito\|AMQP_RabbitMQ\|Redis |
  | Comment |  |
end legend

@enduml
