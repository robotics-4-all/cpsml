@startuml
set namespaceSeparator .


class api.Model  {
}


class api.Metadata  {
  name : ID
  author : STRING
  description : STRING
}


class api.API <<abstract>> {
}


class api.AsyncAPI  {
  name : ID
}


class api.BrokerInfo  {
  btype : BrokerType
  host : STRING
  port : INT
  ssl : BOOL
  username : STRING
  password : STRING
}


class api.Endpoint <<abstract>> {
}


class api.Publisher  {
  uri : STRING
  namespace : STRING
}


class api.Subscriber  {
  uri : STRING
  namespace : STRING
}


class api.RPC  {
  uri : STRING
  namespace : STRING
}


class api.Action  {
  uri : STRING
  namespace : STRING
}


class api.Array  {
}


class api.Value <<abstract>> {
}


class api.Dict  {
}


class api.Member  {
  key : STRING
}


class api.Import  {
  importURI : FQNI
  name : ID
}


class msg.MessageModel  {
}


class msg.Message <<abstract>> {
}


class msg.PubSubMessage  {
  name : ID
  description : Description
}


class msg.Request  {
}


class msg.Response  {
}


class msg.ReqRespMessage  {
  name : ID
  description : Description
}


class msg.ActionGoal  {
}


class msg.ActionResult  {
}


class msg.ActionFeedback  {
}


class msg.ActionMessage  {
  name : ID
  description : Description
}


class msg.Import  {
  importURI : FQNI
  name : ID
}


api.Model *--> api.Metadata: metadata
api.Model *--> api.API: api
api.API <|-- api.AsyncAPI
api.AsyncAPI *--> api.BrokerInfo: broker
api.AsyncAPI *--> api.Endpoint: endpoints 0..*
api.AsyncAPI *--> msg.Message: msgs 0..*
api.Endpoint <|-- api.Publisher
api.Endpoint <|-- api.Subscriber
api.Endpoint <|-- api.RPC
api.Endpoint <|-- api.Action
api.Publisher o--> msg.PubSubMessage: msg
api.Subscriber o--> msg.PubSubMessage: msg
api.RPC o--> msg.ReqRespMessage: msg
api.Action o--> msg.ActionMessage: msg
api.Array *--> api.Value: values 0..*
api.Value <|-- api.Dict
api.Value <|-- api.Array
api.Dict *--> api.Member: members 0..*
api.Member *--> api.Value: value
msg.MessageModel *--> msg.Import: imports 0..*
msg.MessageModel *--> msg.Message: msgs 0..*
msg.Message <|-- msg.PubSubMessage
msg.Message <|-- msg.ReqRespMessage
msg.Message <|-- msg.ActionMessage
msg.PubSubMessage *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.Request *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.Response *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.ReqRespMessage *--> msg.Request: request
msg.ReqRespMessage *--> msg.Response: response
msg.ActionGoal *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.ActionResult *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.ActionFeedback *--> datatype.Property: properties 0..*


class datatype.Property <<abstract>> {
}
msg.ActionMessage *--> msg.ActionGoal: goal
msg.ActionMessage *--> msg.ActionResult: result
msg.ActionMessage *--> msg.ActionFeedback: feedback

legend
  Match rules:
  |= Name  |= Rule details |
  | CommentBlock | \\/\\*(.\|\\n)*\?\\*\\/ |
  | FQN | FQN |
  | FQN | ID (. ID)* |
  | CommentLine | \\/\\/.*\?$ |
  | Comment |  |
  | Description | \\#(.*\?)$ |
  | Description | \\#(.*\?)$ |
  | BrokerType | AMQP\|MQTT\|Redis |
  | FQNI | (ID)+ .*\? |
  | FQNI | (ID)+ .*\? |
  | CommentBlock | \\/\\*(.\|\\n)*\?\\*\\/ |
  | EndpointType | Publisher\|Subscriber\|RPC\|Action |
  | NID | (.*\?)\\n |
  | RestAPI | NOT_IMPLEMENTED_REST_API |
  | CommentLine | \\/\\/.*\?$ |
  | NID | (.*\?)\\n |
  | Comment |  |
end legend

@enduml
