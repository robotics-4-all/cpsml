/*
    Thing DSL
*/

reference comm_idl as idl
import networking
import communication

Model:
    (
    imports*=Import
    things*=Thing
    networks*=Network
    (networkTopology=NetworkTopology)?
    )#
;


D2NConnection:
    'D2N' from=[Thing] '->' to=[Network]
;


Thing: Robot | Device | Sensor | Actuator;

Robot:
    'Robot' name=ID
        (
            ('type' ':' rtype=RobotType)
            ('computeDevices' ':' devices=[Device:FQN])?
            ('sensors:' '-' sensors*=[Sensor:FQN|+m:things]['-'])?
            ('actuators:' actuators*=[Actuator:FQN])?
            ('capabilities:' capabilities*=[RobotCapabilities:FQN])?
            ('networking:' netIfaces*=NetworkInterfaceType[','])?
            ('communication:' broker=[CommunicationMiddleware:FQN])?
            ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

Device:
    'Device' name=ID
        (
        ('type: ' type=ComputeDeviceType)
        ('sensors:' sensors*=[Sensor:FQN])?
        ('actuators:' actuators*=[Actuator:FQN])?
        ('networking:' netIfaces*=NetworkInterfaceType[','])
        ('communication:' broker=[CommunicationMiddleware:FQN])
        ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

Sensor:
    GenericSensor   |
    RangeFinder     |
    LiDARSensor     |
    CameraRGB       |
    CameraThermal   |
    Button
;

Actuator: GenericActuator;

GenericSensor:
    'Sensor' name=ID
        'type:' type=SensorType ';'
        'dataModel:' dataModel=[idl.DataType:FQN] ';'
        (
        ('connectivity:' protocol=[DeviceConnectivity] ';')?
        ('freq:' acqFreq=FLOAT ';')?
        ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

GenericActuator:
    'Actuator' name=ID
        'type:' type=ActuatorType ';'
        'dataModel:' dataModel=[idl.DataType:FQN] ';'
        (
        ('connectivity:' protocol=[DeviceConnectivity] ';')?
        ('responseTime:' responseTime=FLOAT ';')?
        )#
    'end'
;

Button:
    'Button' name=ID
        /* 'type:' type=[ButtonType] ';' */
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('hw_conn:' protocol=[DeviceConnectivity] ';')?
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

RangeFinder:
    'RangeFinder' name=ID
        (
            ('type:' type=[RangeFinderType] ';')
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' connectivity=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
            ('hfov:' hfov=FLOAT ';')?
            ('vfov:' vfov=FLOAT ';')?
            ('minRange:' minRange=FLOAT ';')?
            ('maxRange:' maxRange=FLOAT ';')?
        )#
    'end'
;

LiDARSensor:
    'LiDARSensor' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
            ('minAngle:' minAngle=FLOAT ';')?
            ('maxAngle:' maxAngle=FLOAT ';')?
            ('numRanges:' numRanges=FLOAT ';')?
            ('minRange:' minRange=FLOAT ';')?
            ('maxRange:' maxRange=FLOAT ';')?
        )#
    'end'
;

CameraRGB:
    'CameraRGB' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
            ('resHeight:' resHeight=FLOAT ';')?
            ('resWidth:' resWidth=FLOAT ';')?
            ('hfov:' hfov=FLOAT ';')?
            ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

CameraThermal:
    'CameraThermal' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
            ('resHeight:' resHeight=FLOAT ';')?
            ('resWidth:' resWidth=FLOAT ';')?
            ('hfov:' hfov=FLOAT ';')?
            ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

Accelerometer:
    'Accelerometer' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Magnetometer:
    'Magnetometer' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Gyroscope:
    'Gyroscope' name=ID
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        'type:' type=IMUType ';'
        (
            ('dataModel:' dataModel=[idl.DataType:FQN] ';')
            ('connectivity:' protocol=[DeviceConnectivity] ';')?
            ('freq:' pubFreq=FLOAT ';')?
            ('maxFreq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotCapabilities:
    'Mobility' |
    'VoiceInterraction' |
    'NLU' |
    'Navigation' |
    'Mapping' |
    'SLAM' |
    'FaceDetection' |
    'ObjectDetection'
;


SensorType:
    'Range' |
    'LiDAR' |
    'CameraRGB' |
    'Thermal' |
    'ThermalArray' |
    'CameraThermal' |
    'IMU' |
    'Compass' |
    'Accelerometer' |
    'Magnetometer'
;

ActuatorType:
    'DCMotor' |
    'LED' |
    'RGBLed' |
    'NeopixelLED' |
    'ServoMotor'
;

DeviceConnectivity: WirelessConnection | HardwareConnection;

WirelessConnection: 'Wifi' | 'BLE';

HardwareConnection: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH';

RangeFinderType: 'Sonar' | 'ToF' | 'IR';

ComputeDeviceType: 'ESP32' | 'ESP8266' | 'RPI3' | 'RPI4' | 'JetsonNano';

FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
