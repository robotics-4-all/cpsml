/*
    Thing DSL
*/

reference comm_idl as idl
import networking
import communication

Model:
    (
    imports*=Import
    things*=Thing
    networks*=Network
    (networkTopology=NetworkTopology)?
    )#
;


D2NConnection:
    'D2N' from=[Thing] '->' to=[Network]
;


Thing: Robot | Device;

Robot:
    'Robot' name=ID
        (
        ('type' ':' type=RobotType)
        ('computeDevices' ':' devices=[ComputeDevice:FQN])
        ('sensors:' sensors*=[SensorDevice:FQN])
        ('actuators:' actuators*=[ActuatorDevice:FQN])
        ('capabilities:' '[' capabilities*=[RobotCapabilities:FQN] ']' ';')
        ('networking:' netIfaces*=NetworkInterfaceType[','])
        ('communication:' broker=[CommunicationMiddleware:FQN])
        ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

Device: ComputeDevice | PeripheralDevice;

ComputeDevice:
    'ComputeDevice' name=ID
        (
        ('type: ' type=ComputeDeviceType)
        ('sensors:' sensors*=[SensorDevice:FQN])
        ('actuators:' actuators*=[ActuatorDevice:FQN])
        ('networking:' netIfaces*=NetworkInterfaceType[','])
        ('communication:' broker=[CommunicationMiddleware:FQN])
        ('hasBle: ' ble=BOOL)?
        )#
    'end'
;

PeripheralDevice: SensorDevice | ActuatorDevice;

SensorDevice:
    GenericSensor   |
    RangeFinder     |
    LiDARSensor     |
    CameraRGB       |
    CameraThermal   |
    Button
;

ActuatorDevice: GenericActuator;

GenericSensor:
    'Sensor' name=ID
        'type:' type=SensorType ';'
        'data_model:' dataModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' pubFreq=FLOAT ';')?
        )#
    'end'
;

GenericActuator:
    'Actuator' name=ID
        'type:' type=ActuatorType ';'
        'data_model:' dataModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('response_time:' responseTime=FLOAT ';')?
        )#
    'end'
;

Button:
    'Button' name=ID
        /* 'type:' type=[ButtonType] ';' */
        'data_model:' dataModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

RangeFinder:
    'RangeFinder' name=ID
        (
        ('type:' type=[RangeFinderType] ';')
        ('data_model:' dataModel=[idl.DataType] ';')
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    'end'
;

LiDARSensor:
    'LiDARSensor' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('min_angle:' minAngle=FLOAT ';')?
        ('max_angle:' maxAngle=FLOAT ';')?
        ('num_ranges:' numRanges=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    'end'
;

CameraRGB:
    'CameraRGB' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

CameraThermal:
    'CameraThermal' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

Accelerometer:
    'Accelerometer' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Magnetometer:
    'Magnetometer' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Gyroscope:
    'Gyroscope' name=ID
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        'type:' type=IMUType ';'
        'data_model:' cmdModel=[idl.DataType] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotCapabilities:
    'Mobility' |
    'VoiceInterraction' |
    'NLU' |
    'Navigation' |
    'Mapping' |
    'SLAM' |
    'FaceDetection' |
    'ObjectDetection'
;


SensorType: 'Range' | 'LiDAR' | 'CameraRGB' | 'Thermal' | 'ThermalArray' | 'CameraThermal' | 'IMU' | 'Compass' | 'Accelerometer' | 'Magnetometer';

ActuatorType: 'DCMotor' | 'LED' | 'RGBLed' | 'NeopixelLED' | 'ServoMotor';

HWProtocol: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH';

RangeFinderType: 'Sonar' | 'ToF' | 'IR';

ComputeDeviceType: 'ESP32' | 'ESP8266' | 'RPI3' | 'RPI4' | 'JetsonNano';

FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
