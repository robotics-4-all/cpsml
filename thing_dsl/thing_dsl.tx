/*
    Thing DSL
*/

reference comm_idl as idl

Model:
    (
    imports*=Import
    things*=Thing
    sensors*=SensorComponent
    actuators*=ActuatorComponent
    networks*=Network
    (networkTopology=NetworkTopology)?
    )#
;

Network: WiredNetwork| WirelessNetwork;

WiredNetwork:
    'WiredNetwork' name=ID
        'subnet:' subnet=STRING
        'subnet_mask:' subnet_mask=STRING
        'gateway:' gateway=STRING
        ('dns:' '[' dns*=STRING[','] ']')?
    'end'
;


WirelessNetwork:
    'WirelessNetwork ' name=ID
        'ssid: ' wifi_ssid=STRING
        'psk: ' psk=STRING
        'subnet:' subnet=STRING
        'subnet_mask:' subnet_mask=STRING
        'gateway:' gateway=STRING
        ('dns:' '[' dns*=STRING[','] ']')?
    'end'
;

NetworkConnection: D2NConnection | N2NConnection;

D2NConnection:
    'D2N' from=[Thing] '->' to=[Network]
;

N2NConnection:
    'N2N' from=[Network] '->' to=[Network]
;

NetworkTopology:
    'NetworkTopology' name=ID
        connections*=[NetworkConnection]
    'end'
;

MessageBroker: RabbitMQ | MQTTBroker | RedisBroker;

RabbitMQ:
    'RabbitMQ' name=ID
        host=STRING
        port=INT
        vhost=STRING
        ssl=BOOL
    'end'
;

MQTTBroker:
    'MQTTBroker'
        host=STRING
        port=INT
        ssl=BOOL
    'end'
;

RedisBroker:
    'RedisBroker'
        host=STRING
        port=INT
        (db=INT)#
        ssl=BOOL
    'end'
;

NetworkInterfaceType: 'Ethernet' | 'Wifi';

Thing: Robot | Device;

Robot:
    'Robot' name=ID
        (
        ('type:' type=RobotType ';')
        ('sensors:' '[' sensors*=[SensorComponent] ']' ';')
        ('actuators:' '[' sensors*=[ActuatorComponent] ']' ';')
        ('capabilities:' '[' capabilities*=[RobotCapabilities] ']' ';')
        ('network_interfaces:' '[' netIfaces*=NetworkInterfaceType[','] ']')
        ('message_broker:' brokers=[MessageBroker])
        ('has_ble: ' ble=BOOL)?
        )#
    'end'
;

Device: EdgeDevice | IoTDevice;

EdgeDevice:
    'EdgeDevice' name=ID
        (
        ('type: ' type=EdgeDeviceType ';')
        ('sensors: ' '[' sensors*=[SensorComponent] ']')
        ('actuators: ' '[' sensors*=[ActuatorComponent] ']')
        ('network_interfaces:' '[' netIfaces*=NetworkInterfaceType[','] ']')
        ('message_broker: ' brokers=[MessageBroker])
        ('has_ble: ' ble=BOOL)?
        )#
    'end'
;

IoTDevice: GenericIoTDevice;

IoTDevice:
    'Device' name=ID
        (
        ('type:' type=IoTDeviceType ';')
        ('sensors:' '[' sensors*=[SensorComponent] ']' ';')
        ('actuators:' '[' sensors*=[ActuatorComponent] ']' ';')
        ('network_interfaces:' '[' netIfaces*=NetworkInterfaceType[','] ']')
        ('message_broker: ' brokers=[MessageBroker])
        ('has_ble: ' ble=BOOL)?
        )#
    'end'
;

DeviceComponent: SensorComponent | ActuatorComponent;

SensorComponent:
    GenericSensor   |
    RangeFinder     |
    LiDARSensor     |
    CameraRGB       |
    CameraThermal   |
    Button
;

ActuatorComponent: GenericActuator;

GenericSensor:
    'Sensor' name=ID
        'type:' type=SensorType ';'
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' pubFreq=FLOAT ';')?
        )#
    'end'
;

GenericActuator:
    'Actuator' name=ID
        'type:' type=ActuatorType ';'
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('response_time:' responseTime=FLOAT ';')?
        )#
    'end'
;

Button:
    'Button' name=ID
        /* 'type:' type=[ButtonType] ';' */
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

RangeFinder:
    'RangeFinder' name=ID
        (
        ('type:' type=[RangeFinderType] ';')
        ('data_model:' dataModel=[idl.Object] ';')
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    'end'
;

LiDARSensor:
    'LiDARSensor' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('min_angle:' minAngle=FLOAT ';')?
        ('max_angle:' maxAngle=FLOAT ';')?
        ('num_ranges:' numRanges=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    'end'
;

CameraRGB:
    'CameraRGB' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

CameraThermal:
    'CameraThermal' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    'end'
;

Accelerometer:
    'Accelerometer' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Magnetometer:
    'Magnetometer' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

Gyroscope:
    'Gyroscope' name=ID
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMU:
    'IMU' name=ID
        'type:' type=IMUType ';'
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    'end'
;

IMUType: '6DOF' | '9DOF';

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotCapabilities:
    'Mobility' |
    'VoiceInterraction' |
    'NLU' |
    'Navigation' |
    'Mapping' |
    'SLAM' |
    'FaceDetection' |
    'ObjectDetection'
;


SensorType: 'Range' | 'LiDAR' | 'CameraRGB' | 'Thermal' | 'ThermalArray' | 'CameraThermal' | 'IMU' | 'Compass' | 'Accelerometer' | 'Magnetometer';

ActuatorType: 'DCMotor' | 'LED' | 'RGBLed' | 'NeopixelLED' | 'ServoMotor';

HWProtocol: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH';

RangeFinderType: 'Sonar' | 'ToF' | 'IR';

IoTDeviceType: 'ESP32' | 'ESP8266';
EdgeDeviceType: 'RPI3' | 'RPI4' | 'JetsonNano';

FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)? ';';

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
