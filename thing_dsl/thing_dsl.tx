/*
    Thing DSL
*/

reference comm_idl as idl

Model:
    (
    imports*=Import
    things*=Thing
    sensors*=SensorComponent
    actuators*=ActuatorComponent
    )#
;

Thing: Robot | EmbeddedDevice;

Robot:
    'Robot' name=ID '->' '{'
        (
        ('type:' type=RobotType ';')
        ('sensors:' '[' sensors*=[SensorComponent] ']' ';')
        ('actuators:' '[' sensors*=[ActuatorComponent] ']' ';')
        ('capabilities:' '[' capabilities*=[RobotCapabilities] ']' ';')
        )#
    '}'
;

EmbeddedDevice:
    'EmbeddedDevice' name=ID '->' '{'
        (
        ('type:' type=DeviceType ';')
        ('sensors:' '[' sensors*=[SensorComponent] ']' ';')
        ('actuators:' '[' sensors*=[ActuatorComponent] ']' ';')
        )#
    '}'
;

DeviceComponent: SensorComponent | ActuatorComponent;

SensorComponent: GenericSensor | RangeSensor | LiDARSensor | CameraRGB |
CameraThermal | Button;

ActuatorComponent: GenericActuator;

GenericSensor:
    'Sensor' name=ID '->' '{'
        'type:' type=SensorType ';'
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' pubFreq=FLOAT ';')?
        )#
    '}'
;

GenericActuator:
    'Actuator' name=ID '->' '{'
        'type:' type=ActuatorType ';'
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('response_time:' responseTime=FLOAT ';')?
        )#
    '}'
;

Button:
    'Button' name=ID '->' '{'
        /* 'type:' type=[ButtonType] ';' */
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        )#
    '}'
;

RangeSensor:
    'RangeSensor' name=ID '->' '{'
        'type:' type=[RangeSensorType] ';'
        'data_model:' dataModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    '}'
;

LiDARSensor:
    'LiDARSensor' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('min_angle:' minAngle=FLOAT ';')?
        ('max_angle:' maxAngle=FLOAT ';')?
        ('num_ranges:' numRanges=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
        )#
    '}'
;

CameraRGB:
    'CameraRGB' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    '}'
;

CameraThermal:
    'CameraThermal' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        (
        ('hw_conn:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('res_height:' resHeight=FLOAT ';')?
        ('res_width:' resWidth=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        )#
    '}'
;

RobotType: 'Humanoid' | 'UGV' | 'UAV';

RobotCapabilities: 'SLAM' | 'Navigation' | 'FaceDetection' | 'ObjectDetection' |
'Mobility' | 'Manipulation';

SensorType: 'Range' | 'LiDAR' | 'CameraRGB' | 'Thermal' | 'ThermalArray' | 'CameraThermal' | 'IMU' | 'Compass' | 'Accelerometer' | 'Magnetometer';

ActuatorType: 'DCMotor' | 'LED' | 'RGBLed' | 'NeopixelLED' | 'ServoMotor';

HWProtocol: 'SPI' | 'I2C' | 'UART' | 'GPIO' | 'USB' | 'ETH';

RangeSensorType: 'Sonar' | 'ToF' | 'IR';

DeviceType: 'RPI3' | 'RPI4' | 'ESP32' | 'ESP8266';

FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)? ';';

// Import Rule for models. Import other models from files or textx
// global scope database.
// https://textx.github.io/textX/stable/multimetamodel/#use-case-meta-model-sharing-with-the-importuri-feature

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
