/*
    Thing DSL
*/

reference comm_idl as idl

Model:
    imports*=Import
    sensors*=Sensor
    actuators*=Actuator
;

Thing: Robot | Device;

Robot:
    'Robot' name=ID '->' '{'
        'type:' type=DeviceType ';'
        'sensors:' sensors*=[SensorComponent] ';'
        'actuators:' sensors*=[ActuatorComponent] ';'
    '}'
;

Device:
    'Device' name=ID '->' '{'
        'type:' type=DeviceType ';'
        'sensors:' sensors*=[SensorComponent] ';'
        'actuators:' sensors*=[ActuatorComponent] ';'
    '}'
;

DeviceComponent: Sensor | Actuator;

Sensor: RangeSensor;

Actuator: GenericActuator;

GenericSensor:
    'Sensor' name=ID '->' '{'
        'type:' type=SensorType ';'
        'data_model:' dataModel=[idl.Object] ';'
        'protocol:' protocol=[HWProtocol] ';'
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' pubFreq=FLOAT ';')?
    '}'
;

GenericActuator:
    'Actuator' name=ID '->' '{'
        'type:' type=ActuatorType ';'
        'command_model:' cmdModel=[idl.Object] ';'
        'protocol:' protocol=[HWProtocol] ';'
        ('response_time:' responseTime=FLOAT ';')?
    '}'
;

RangeSensor:
    'RangeSensor' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        ('protocol:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
        ('min_range:' minRange=FLOAT ';')?
        ('max_range:' maxRange=FLOAT ';')?
    '}'
;

LiDARSensor:
    'LiDARSensor' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        ('protocol:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('min_angle:' minAngle=FLOAT ';')?
        ('max_angle:' maxAngle=FLOAT ';')?
        ('num_ranges:' numRanges=FLOAT ';')?
        ('min_range:' pubFreq=FLOAT ';')?
        ('max_range:' pubFreq=FLOAT ';')?
    '}'
;

CameraRGB:
    'CameraRGB' name=ID '->' '{'
        'data_model:' cmdModel=[idl.Object] ';'
        ('protocol:' protocol=[HWProtocol] ';')?
        ('freq:' pubFreq=FLOAT ';')?
        ('max_freq:' maxFreq=FLOAT ';')?
        ('hfov:' hfov=FLOAT ';')?
        ('vfov:' vfov=FLOAT ';')?
    '}'
;

SensorType: 'Range' | 'LiDAR' | 'CameraRGB' | 'Thermal' | 'ThermalArray' | 'CameraThermal' | 'IMU' | 'Compass' | 'Accelerometer' | 'Magnetometer';
ActuatorType: 'DCMotor' | 'LED' | 'RGBLed' | 'NeopixelLED' | 'ServoMotor';

HWProtocol: 'spi' | 'i2c' | 'uart' | 'gpio';

DeviceType: 'rpi' | 'esp';

CPUArch: 'armv6' | 'armv7' | 'esp';

FQN: ID+['.'];
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)? ';';

// Import Rule for models. Import other models from files or textx
// global scope database.
// https://textx.github.io/textX/stable/multimetamodel/#use-case-meta-model-sharing-with-the-importuri-feature

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
